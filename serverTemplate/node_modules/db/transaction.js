var Future = require("fibers/future")
var utils = require("utils")
var User = require("db/user")
var MongoObject = require("MongoObject")
var proto = require("proto")

var logger = require("logger")()

module.exports = proto(MongoObject, function() {

    this.collection = 'transaction'

    // static methods

    this.createNormal = function (recorder, creditor, debitor, amount, currency, subject, message) {
        logger.info("Trying to create transaction for "+amount+" between "+creditor._id+" and "+debitor._id+" about "+subject+" "+message)

        var t = this.self({
            _id: this.id(),   // generating IDs clientside is just as good as generating them db-side: http://stackoverflow.com/questions/7441480/help-with-mongodb-and-unique-id-generation
            type: 'normal',

            recorder:recorder._id,
            subject:subject,

            creditor:creditor._id,
            debitor: debitor._id,
            amount:amount,
            currency:currency,

            accepted:false
        });

        t.insert();
        t.email();

        return t;
    }

    this.getTransactionsForUsers = function(userA, userB) {
        if(userB !== undefined) {
            var query = {
                $or: [
                    {creditor: userA._id, debitor: userB._id},
                    {creditor: userB._id, debitor: userA._id}
                ]
            }
        } else {
            var query = {creditor: userA._id}
        }

        var transactions = utils.futureWrap(this.read().find(query).sort({date: -1}), 'toArray')().wait()

        transactions.each(function(t) {
            t.creditor = User.get(t.creditor).wait();
            t.debitor = User.get(t.debitor).wait();

            if(t.creditor._id === t.recorder)
                t.recorder = t.creditor
            else if(t.debitor._id === t.debitor)
                t.recorder = t.debitor
        })

        return transactions
    }.future()

    // instance methods

    this.email = function() {
        if(this.recorder !== this.creditor) {
            var senderId = this.debitor;
            var otherPartyId = this.creditor;
        } else {
            var otherPartyId = this.debitor;
            var senderId = this.creditor;
        }

        var otherParty = User.get(otherPartyId);
        var sender = User.get(senderId);

        var message = sender.name + " has recorded an interaction with you on Perfund.com!";
        if(otherParty.username === null) {
            var signUpLink = "www.perfund.com";
            message += " Sign up by following this link: \n\n"+signUpLink;

        } else {
            var accountLink = "www.perfund.com";
            message += " View your account here: \n\n"+accountLink;
        }

        message = "\n\nPerfund is a website that makes it easy to keep track of how much you owe your friends."
                    + " Its under development by Billy Tetrud and Scott Delly";

        if(otherParty.email !== null) {
            //utils.email(otherParty.email, "New Perfund Transaction from ".sender.name, message);
        }

    }
})


