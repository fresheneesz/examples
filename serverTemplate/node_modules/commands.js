"use strict";

var validate = require('validator').validate

var Logger = require("logger")
var Transaction = require("db/transaction")
var User = require('db/user')

exports.login = function(username, password) {
    var login = User.login(username, password)

    if(login.result === 'success')
        return success({token: login.user.sessionToken()})
    else
        return result(login.result)
}

exports.logout = function(token) {
    User.blacklistToken(token)
    return success()
}

exports.signUp = function(username, password, password2) {
	var signup = User.signUp(username,password,password2);

    if (signup.result === 'success') {
        return success();
    } else {
        return result(signup.result);
	}
}

exports.jsLog = function(context, prio, msg, data) {
    Logger.logInContext(context, null, "client", Logger.port, prio, msg, data)
    return success()
}

exports.createTransaction = function(amount, curUser, otherPartyName, subject) {

    validate(amount).isNumeric()

    var ghostUser = User.createGhostUser(curUser, otherPartyName)
    if(amount > 0) {
        var creditor = curUser
        var debitor = ghostUser

    } else if(amount < 0) {
        var creditor = curUser
        var debitor = ghostUser
        amount *= -1
    } else {
        throw new Error('Amount is 0')
    }

    var currency = "USD"	// todo: put in a real currency object here
    Transaction.createNormal(curUser, creditor, debitor, amount, currency, subject)
    return success()
}

// get transactions that involve a user or both of two users
exports.getTransactions = function(curUser, userA, userB) {
    if(userA === undefined)
        userA = curUser

    var trs = Transaction.getTransactionsForUsers(userA, userB);

    return success({transactions:trs.wait()});
}

function success(otherData) {
     return result('success', otherData)
}
function result(result, otherData) {
    if(!otherData) otherData = {}

    otherData.result = result
    return otherData
}
