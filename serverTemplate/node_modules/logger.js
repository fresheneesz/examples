require('colors')
var database = require('database')
var utils = require("utils")
var path = require("path")
var MongoObject = require('MongoObject')
var proto = require('bt/proto')

var config = require('config')

var machineName = utils.getMachineName()

// only pass context if the context is outside node.js
// context is grabbed automatically if not passed
module.exports = proto(MongoObject, function() {

    this.collection = 'log'

    this.make = function(context) {
        if(this.self.initialized) {
            if(context)
                this.context = context
            else
                this.context = path.relative(require('rootpath')("."), path.basename(utils.grabStack()[2].getFileName()))

            return this
        } else {
            throw new Error('Logger not yet initialized! Initialize first!')
        }
    }

    // static methods

    this.init = function(scriptFilename, serverPort) {
        if(!this.self.initialized) {
            this.self.initialized = true
            this.self.script = scriptFilename
            this.self.port = serverPort
        } else {
            throw new Error('Logger initialized already! Can\'t init twice!')
        }
    }

    this.logInContext = function(context, script, machineName, port, prio, msg/*, data, ...*/) {
        var log = {}
        var data = utils.trimArgs(arguments).slice(6);
        data.each(function(v, k) {
            if(v instanceof Error)
                data[k] = v.stack
        })

        utils.merge(log, data)
        utils.merge(log,{     // note, date is stored in mongo's ObjectId
            prio:prio,
            file:script,
            context:context,
            server: machineName+":"+port,
            process: process.pid,
            msg:msg
        })


        this.insert(/*journal=*/false)

        if(config.logToConsole) {
            var prioColor = 'white';
            if(log.prio === 'info') prioColor = 'white'
            else if(log.prio === 'warn') prioColor = 'grey'
            else if(log.prio === 'ERROR') prioColor = 'red'
            else if(log.prio === 'SEVERE') prioColor = 'magenta'

            var consoleLog = utils.timeFormat(new Date()).toString().cyan
                  +" "+log.prio[prioColor]+" "+log.server+"-pid"+log.process+" "+log.file+" "+log.context.green+" "+msg[prioColor]
            if(data.length > 0)
                consoleLog+= "\n"+JSON.stringify(data)[prioColor]

            console.log(consoleLog.grey)
        }
    }

    // instance methods

    this.severe = function(msg/*, data, ...*/) {       // things that bring down the system, cause data corruption, or similarly terrible things
        this.logLevel('SEVERE', arguments)
    }
    this.error = function(msg/*, data, ...*/) {        // problems with our code, things we need to fix
        this.logLevel('ERROR', arguments)
    }
    this.warn = function(msg/*, data, ...*/) {         // less pressing problems, problems with other people's code, or problems we expect to happen regularly
        this.logLevel('warn', arguments)
    }
    this.info = function(msg/*, data, ...*/) {         // just info for later reference
        this.logLevel('info', arguments)
    }

    // prio is one of the above ^
    // msg should usually be the same for every log (ie shouldn't contain variables or other specific data
    // additional arguments are printed / saved as additional data
    this.log = function(prio, msg/*, data, ...*/) {
        var args = [this.context, this.self.script, machineName, this.self.port].concat(utils.trimArgs(arguments))
        this.logInContext.apply(this, args);
    }

    // private

    this.logLevel = function(level, args) {
        this.log.apply(this, [level].concat(utils.trimArgs(args)))
    }
})
